!@encoding CP1252
model ModelName
forward procedure ReadDataFile
forward function arg_max(A: set of integer) : integer
forward function deg(A: set of integer, v: integer): integer
forward procedure update_cmin
forward procedure update_dsat
forward procedure tao2
forward function probabilidad(v:integer):real

declarations
	delta: dynamic array (range) of set of integer  
	n: integer
	f: string
end-declarations

!writeln("Archivo de datos: ")
!read(f)
f:= "grafo0.25.txt"

ReadDataFile

declarations
	lista_tao2: array(1..n) of real
	cmin: array(1..n) of integer
	delta_M: array(1..n,1..n) of real     ! Cambio en rastro
	dsat: array(1..n) of integer          ! Grado de saturacion
	V: array(1..n) of set of integer      ! Colores asignados
	A: set of integer                     ! Vertices sin color
	M: array(1..n,1..n) of real           ! Matriz de rastro
	S_cero: array(1..n) of set of integer ! Mejor solucion
	rho: real                             ! Tasa de evaporacion
	alpha: real                           ! Importancia de feromona                      
	beta: real                            ! Importancia de deseabilidad
	nants: integer
	ncycles_max: integer
end-declarations

!!! Valores prueba
rho:=0.5
nants:=10
ncycles_max:=10
alpha:=4
beta:=1

!!!

!writeln("Ingrese valor de rho: ")
!read(rho)

!writeln("Ingrese valor de alfa: ")
!read(alpha)

!writeln("Ingrese valor de beta: ")
!read(beta)

!writeln("Ingrese numero de hormigas: ")
!read(nants)

!writeln("Ingrese tolerancia de ciclos")
!read(ncycles_max)

ReadDataFile

forall(i,j in 1..n) M(i,j):=1 !Inicializacion del rastro
f_cero:=MAX_INT

forall(ncycles in 1..ncycles_max)do
	forall(r,s in 1..n) delta_M(r,s):=0
	forall(a in 1..nants)do
		delcell(V) ! Vaciar la solucion V de la hormiga actual
		
		forall(i in 1..n)cmin(i):=1
		forall(i in 1..n)dsat(i):=0
		A:=1..n
		v:=arg_max(A)
		V(1):=V(1)+{v}
		q:=1
		forall(i in 2..n)do
			update_cmin
			update_dsat
			A:=A-{v}
			
			! Funcion psi
			!llenar tao2
			delcell(lista_tao2)
			tao2
			auxiliar:=0.0
			forall(posibilidades in 1..n)do
				if probabilidad(posibilidades)>0 then
					auxiliar+=probabilidad(posibilidades)
					if auxiliar >= random then
						v:=posibilidades
						break
					end-if
				end-if
			end-do 
			
			V(cmin(v)):=V(cmin(v))+{v}
			
			! Determinar el color de la solucion !cambio
			if cmin(v)=q+1 then
				q:=q+1
			end-if
		end-do
		if q<f_cero then
				forall(i in 1..n)do
					S_cero(i):=V(i)
				end-do
				writeln("SOLUTION IMPROVEMENT")
				writeln("iteration ",ncycles, " with ant ",a, " value of q: ",q)
				f_cero:=q
		else
				writeln("iteration ",ncycles, " with ant ",a, " no improvement")
		end-if
		forall(j in 1..q)do
			forall(r,s in V(j))do
				delta_M(r,s):=delta_M(r,s)+1/q
			end-do
		end-do
	end-do
	forall(r,s in 1..n)do
	M(r,s):=rho*M(r,s)+delta_M(r,s)
	end-do
end-do
writeln("Number of color classes: ",f_cero)
forall(i in 1..f_cero)do
	writeln("C(",i,"): ",V(i))
end-do


procedure update_cmin
	forall(u in A)do
		cmin(u):=min(k in 1..getsize(V) | delta(u)*V(k)={}) k
	end-do 
end-procedure


procedure update_dsat
	forall(u in A, i in 1..getsize(V))do
		if delta(u)*V(i)<>{}then
			dsat(u)+=1
		end-if
	end-do
end-procedure

!!!! Leer con lista de aristas
procedure ReadDataFile
    declarations
        i, j: integer  
    end-declarations
    fopen(f, F_INPUT)
    while (not iseof) do
        read(i)
        read(j)
        delta(i) += {j}  
        delta(j) += {i}  
    end-do
    n:=getsize(delta)
end-procedure

!!!! Leer con matriz de adyacencia ??


function arg_max(A: set of integer) : integer
	mejor_valor:=0
	forall(nodo in A)do
		if deg(A,nodo)>mejor_valor then
			mejor_valor:=deg(A,nodo)
			mejor_nodo:=nodo
		end-if
	end-do
	returned:=mejor_nodo
end-function


function deg(A: set of integer, v: integer): integer
	returned:=getsize(A*delta(v))
end-function


procedure tao2
	declarations
		fin: real
	end-declarations
	forall(i in 1..n)do

	c:=cmin(i)
	if V(c)={} then
		fin:=1.0
	else
		suma:=sum(x in V(c)) M(x,v)
		fin:= suma/getsize(V(c))
	end-if
	lista_tao2(i):=fin
	end-do
end-procedure


function probabilidad(v:integer):real
	arriba:=(lista_tao2(v)^alpha)*dsat(v)^beta
	normalizacion:=0.0
	
	forall(o in A)do
		normalizacion:=normalizacion+(lista_tao2(o)^alpha)*dsat(o)^beta
	end-do
	
	if v in A then
		returned:=arriba/normalizacion
	else 
		returned:=0
	end-if
end-function

end-model